/* SimpleApp.scala */
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.api.java.function._
import org.apache.spark.streaming._
import org.apache.spark.streaming.api._

import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.storage.StorageLevel

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: NetworkWordCount <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ sbt package
 *    '$ spark-submit --class "NetworkWordCount" --master local[4] target/scala-2.10/simple-project_2.10-1.0.jar
 */
object NetworkWordCount {
  def bi_string_fixer(astring: String): Array[String] = {
    /* replace(" n't", "n't").replace(' \' ', '') */
    val new_string = astring.replaceAll(" n't", "n't").replaceAll( " '", "").replaceAll( " [.]", "").replaceAll( "[.]", "").replaceAll( ",", "").replaceAll("'", "").replaceAll("`` ", "").replaceAll("`", "").replaceAll("   ", " ").replaceAll("  ", " ").replaceAll("\n", "").toLowerCase().trim

    val list_of_words = new_string.split(" ")

    var new_list: Array[String] = Array[String]()
    for (x <- (0 to list_of_words.length - 2)) {
        var temp_string = list_of_words(x).toString() + " " + list_of_words(x + 1).toString()
        new_list = new_list :+ temp_string
      }

    new_list
  }
  def main(args: Array[String]) {
    // if (args.length < 2) {
    //   System.err.println("Usage: NetworkWordCount <hostname> <port>")
    //   System.exit(1)
    // }
    val updateFunc = (values: Seq[Int], state: Option[Int]) => {
      val currentCount = values.foldLeft(0)(_ + _)

      val previousCount = state.getOrElse(0)

      Some(currentCount + previousCount)
    }

    //StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(10))
    ssc.checkpoint(".")

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream("localhost", 9999, StorageLevel.MEMORY_AND_DISK_SER)
    val unigrams = lines.flatMap(_.split(" "))
    val bigrams = lines.flatMap(bi_string_fixer(_))

    val unigramDstream = unigrams.map(x => (x, 1))
    val bigramsDstream = bigrams.map(x => (x, 1))

    val uniStateDstream = unigramDstream.updateStateByKey[Int](updateFunc)
    val biStateDstream = bigramsDstream.updateStateByKey[Int](updateFunc)

    uniStateDstream.print()
    uniStateDstream.saveAsTextFiles("test-uni", "txt")

    biStateDstream.print()
    biStateDstream.saveAsTextFiles("test-bi", "txt")
    
    ssc.start()
    ssc.awaitTermination()
  }
}
